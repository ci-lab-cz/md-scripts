#!/bin/bash
#
# Authors: 
# Based on Olena Mokshyna's script.
# Aleksandra Ivanova
# Date : 20.02.2022
#
# Description: The following script prepares ligand and protein input files
#               for energy minization and further simulation;
#               defines the unite cell and fills it with water
#               and adds ions. And runs the final simulation
#
# in case of GROMOS FF - We will make use of two files that PRODRG gives us.
#Save the output of the field "The GROMOS87/GROMACS coordinate file (polar/aromatic hydrogens)"
#
# Run Information: You should prepare input files beforehand: Protonate, add all hydrogens for both, ligand and protein, and complete missing atoms and residues for the protein.
#                  You will need *pdb for ligand (After docking or from crystallographic structure);
#                  *pdb file for the protein;
#                  and *mdp files for each minimization, equalibration and simulation
# Arguments: lfile - *mol or *gro file of ligand,
#            pfile - *pdb or *gro file of protein,
#            mdtime - time in ns
#            script_path - dir contains *.mdp files (ions.mdp, minim.mdp, npt.mdp, nvt.mdp, md.mdp).
#
#                         
#            Additional arguments:
#            wdir - working dir. Can be skipped. This argument can be skipped, if so current directory will be used.            
#
# Example call: qsub -v lfile=lig.mol,pfile=protein.pdb,script_path=path,mdtime=5 01_complex_preparation.pbs
# wdir=$(pwd)
#

#PBS -l select=1:ncpus=128:ompthreads=2
#PBS -k oe

>&2 echo 'Script running:***************************** System Variable setting *********************************'

if [ -z $gromacs_version ];
 then
  gromacs_version="GROMACS/2018.1-intel-2017c-hybrid-single-PLUMED"
fi

source activate gmxMMPBSA


# allows relative paths
cd $PBS_O_WORKDIR

>&2 echo 'Script running:***************************** 1. Variable setting *********************************'

if [ -z $lfile ];
  then
  >&2 echo 'lfile is not set. Script will be interrupted'
  exit 1
fi

if [ -z $pfile ];
  then 
  >&2 echo 'pfile argument is not set. Script will be interrupted'
  exit 1
fi

if [ -z $mdtime ];
  then
  >&2 echo 'mdtime argument is not set. Script will be interrupted'
  exit 1
fi

if [ -z $script_path ];
  then
  >&2 echo 'script_path argument is not set. Script will be interrupted'
  exit 1
fi

if [ -z $wdir ]; 
  then wdir=$PBS_O_WORKDIR
fi

if [ $script_path == $wdir ]
then
  >&2 echo 'Script error: Working directory equals script path. To avoid *.mdp files be modified current script will be interrupted.'
  exit 1
fi

LNAME="$(awk -F'/' '{print $NF}' <<<$lfile | cut -d'.' -f1)"
PNAME="$(awk -F'/' '{print $NF}' <<<$pfile | cut -d'.' -f1)"

>&2 echo "GROMACS Version:" $gromacs_version
>&2 echo "Ligand:" $LNAME $lfile
>&2 echo "Protein:" $PNAME $pfile
>&2 echo "WORKDIR:" $wdir $(pwd)
>&2 echo "Script Path" $script_path
>&2 echo "MDtime:" $mdtime "ns"

cd $wdir

# Will Change mdp files
cp $script_path"/"*.mdp .

#ligand prep
>&2 echo 'Script running:***************************** 2. Ligand preparation *********************************'
## Using new version of gmx change python version so first need to run amber to prepare ligand and then load the new gmx
if [ $(cut -d '/' -f2 <<<$lfile | cut -d'.' -f2) != gro ]
 then
  #prepare tleap - add ff from relevant conda env path
  cp $script_path"/tleap.in" .
  sed -i "1s/.*/source "$(echo $CONDA_PREFIX | sed 's/\//\\\//g')"\/dat\/leap\/cmd\/leaprc\.gaff/" tleap.in 
  
  charge=$( python $script_path"/"getcharge.py -i $lfile)
  antechamber -i $lfile -fi mdl -o ligand.mol2 -fo mol2 -c bcc -pf y -s 2 -nc $charge -rn "UNL"
  parmchk2 -i ligand.mol2 -f mol2 -o ligand.frcmod
  tleap -f tleap.in
  python $script_path"/"pmed_amb2gmx.py -p ligand.prmtop -x ligand.inpcrd -o ligand
 else
  cp $LNAME.gro ligand.gro
  cp $LNAME.top ligand.top
  >&2 echo 'Script running: Using prepared ligand *.gro file'
fi

# target preparation
>&2 echo 'Script running:***************************** 3. Target preparation *********************************'
>&2 echo 'Start time:' $(date +%H:%M:%S' '%d-%m-%Y)

module load $gromacs_version

if [ $(cut -d '/' -f2 <<<$pfile | cut -d'.' -f2) != gro ]
then
   gmx pdb2gmx -f $pfile -o $PNAME.gro -water tip3p -ignh <<< 6 #pass FF - here AMBER99SB-ILDN
else
   >&2 echo 'Script running: Using prepared protein *.gro file'
fi

# 2.5 Ligand preparation
#create itps
cp ligand.top ligand.itp
sed -i '/system/,+2 d' ligand.itp
sed -i '/molecules/,+2 d' ligand.itp
sed -i '/defaults/,+2 d' ligand.itp

# restraints
gmx genrestr -f ligand.gro -o posre_ligand.itp -fc 1000 1000 1000 <<< 2
sed -i  "/\; Include topology for ions/i\; Ligand position restraints\n#ifdef POSRES_LIG\n#include \posre_ligand.itp\\n#endif\n" topol.top

# complex
>&2 echo 'Script running:***************************** 4. Complex preparation *********************************'
cp ligand.gro tmp.gro
sed -i '1,2d' tmp.gro #remove first two
sed -i '$ d' tmp.gro #and last line of gro file

cp $PNAME.gro complex.gro
{ head -n-1 complex.gro && cat tmp.gro && tail -n1 complex.gro; } > tmp #insert ligand.gro into complex.gro
mv tmp complex.gro

#THIS STEP IS VERY IMPORTANT! If something goes wrong here there will be bunch of errors later
L_NATOMS=$(head -2 ligand.gro | tail -1)
C_NATOMS=$(($(head -2 complex.gro | tail -1) + $L_NATOMS)) #get general number of atoms in complex
sed -i '2s/.*/'"$C_NATOMS"'/' complex.gro #substitute second line with general num of atoms

#Another IMPORTANT step - be sure to check that *itp is not included in the wrong part
# add ligand.itp to topol.top 
sed -i '/\; Include forcefield parameters/{N;N;s/$/\n; Include ligand topology\n#include \"ligand\.itp\"\n/}' topol.top

#Add ligand to the [ molecules ] directive.
LNAME_gro=$(head -1 tmp.gro | awk '{print $1;}' |  cut -c2-) #extract ligand name from $LNAME.gro; usually name looks like 1JZ4 - you need to remove first number
echo "$LNAME_gro"'             1' >> topol.top #and insert ligand and number of ligand molecules into the last line of topol.top

# need to check! only CHARMM FF
#if FF provides any other files (i.e. *prm file for CHARMM FF) it should be included at the TOP of topol.top
#before [moleculetype] section
if [ -e ligand.prm ]
  then
    sed -i "/\moleculetype/i\; Include ligand parameters\n#include \"ligand\.prm\"\n" topol.top
  else
    >&2 echo "Script running: No *prm file was provided, so nothing was included in topol.top"
fi


# Change ligand name in *mdp file (coupling groups).
## tc-grps  = Protein_UNL Water_and_ions; two coupling groups - more accurate
sed -i 's/tc-grps..*/tc-grps                 = Protein_'$LNAME_gro' Water_and_ions; two coupling groups/' *.mdp
# Change MD simulation time
##nsteps                  = 5000000    ; 2 * 5000000 = 10000000 fs = 10000 ps (10 ns), 25000000*2 fs = 50 ns 100000000
mdsteps=$(awk "BEGIN {picoseconds=$mdtime*1000; femtoseconds=picoseconds*1000; steps=femtoseconds/2; print steps}")
sed -i 's/nsteps..*/nsteps                  = '$mdsteps'        ;/' md.mdp


#Solvate
>&2 echo 'Script running:***************************** 5. Solvation step *********************************'
gmx editconf -f complex.gro -o newbox.gro -c -d 1.0 -bt cubic
#gmx editconf -f complex.gro -o newbox.gro -bt dodecahedron -d 1.2 #Warning about bad box - wrong number of atoms (https://gromacs.org-gmx-users.maillist.sys.kth.narkive.com/q4NXMAoY/bad-box-error) Lena version
gmx solvate -cp newbox.gro -cs spc216.gro -p topol.top -o solv.gro


#Add ions
>&2 echo 'Script running:***************************** 6. Ions *********************************'
#use grompp to assemble *tpr file () using any *mdp file
#here one can use *mdp for energy minization (as recommended in Justin's tutorials)
gmx grompp -f ions.mdp -c solv.gro -p topol.top -o ions.tpr 
#-maxwarn 10
#FATAL error SDMSO type not found -> try renaming to SDmso

gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA -nname CL -neutral <<< SOL


# Create group Protein_UNL in index.ndx
>&2 echo 'Script running:***************************** 7. Group indexing *********************************'
index_ligand=$(gmx make_ndx -f solv_ions.gro <<< "q" | sed -rn "s/([0-9]+) "$LNAME_gro"[0-9: ]*atoms/\1/p"| head -1)
>&2 echo 'Ligand Index:' $index_ligand

gmx make_ndx -f solv_ions.gro -o index.ndx << INPUT 
1|$index_ligand
q
INPUT

#Energy minimization
>&2 echo 'Script running:***************************** 8. Energy minimization *********************************'
gmx grompp -f minim.mdp -c solv_ions.gro -p topol.top -n index.ndx -o em.tpr -maxwarn 1
gmx mdrun -v -deffnm em -s em.tpr

##last but not least generate files for further analysis
gmx energy -f em.edr -o potential.xvg <<< "10 0"


# NVT
>&2 echo 'Script running:***************************** 9. NVT *********************************'
gmx grompp -f nvt.mdp -c em.gro -r em.gro -p topol.top -n index.ndx -o nvt.tpr -maxwarn 1
gmx mdrun -deffnm nvt -s nvt.tpr

gmx energy -f nvt.edr -o temperature.xvg  <<< "16 0"


# NPT
>&2 echo 'Script running:***************************** 10. NPT *********************************'
gmx grompp -f npt.mdp -c nvt.gro -r nvt.gro -t nvt.cpt -p topol.top -n index.ndx -o npt.tpr  -maxwarn 1
gmx mdrun -deffnm npt -s npt.tpr

gmx energy -f npt.edr -o pressure.xvg <<< "17 0"
gmx energy -f npt.edr -o density.xvg <<< "23 0"


# MD
>&2 echo 'Script running:***************************** 11. MD simulation *********************************'
>&2 echo 'Run simulation:' $mdtime 'ns'
gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -n index.ndx -o md_out.tpr -maxwarn 1
gmx mdrun -deffnm md_out -s md_out.tpr


# RMSD
>&2 echo 'Script running:***************************** 12. MD analysis *********************************'

# ligand without Hs
#UNL_&_!H*
gmx make_ndx -f solv_ions.gro -n index.ndx << INPUT
$index_ligand & ! a H*
q
INPUT

index_ligand_noH=$(gmx make_ndx -f solv_ions.gro -n index.ndx <<< "q" | sed -rn "s/([0-9]+) "$LNAME_gro"_\&_\!H\*[0-9: ]*atoms/\1/p"| head -1)

# set tstep
#can change later
if (( $mdtime >= 10 ))
then
  tstep="-tu ns"
else
  tstep="-tu ps"
fi

gmx trjconv -s md_out.tpr -f md_out.xtc -o md_out_noPBC.xtc -pbc mol -center <<< "1  0"
gmx trjconv -s md_out.tpr -f md_out.xtc -o md_centermolsnoPBC.xtc -pbc mol -center -n index.ndx  <<< "Protein_UNL  0"
#use it for PBSA https://github.com/Valdes-Tresanco-MS/gmx_MMPBSA/issues/33
gmx trjconv -s md_out.tpr -f md_centermolsnoPBC.xtc -o md_fit.xtc -n index.ndx -fit rot+trans  <<< "Protein_UNL  0"

if (( $mdtime >= 50 ))
then
  dtstep=100
else
  dtstep=50
fi

gmx trjconv -s md_out.tpr -f md_centermolsnoPBC.xtc -dt $dtstep -o md_short_forcheck.xtc <<< "0"

gmx rms -s md_out.tpr -f md_out_noPBC.xtc -o rmsd.xvg -n index.ndx $tstep <<< "4  4"
gmx rms -s em.tpr -f md_out_noPBC.xtc -o rmsd_xtal.xvg -n index.ndx $tstep <<< "4  4"

gmx rms -s md_out.tpr -f md_out_noPBC.xtc -o rmsd_$LNAME_gro\.xvg -n index.ndx $tstep <<< "4  $index_ligand_noH"
gmx rms -s em.tpr -f md_out_noPBC.xtc -o rmsd_$LNAME_gro\_xtal.xvg -n index.ndx $tstep <<< "4  $index_ligand_noH"

gmx gyrate -s md_out.tpr -f md_out_noPBC.xtc -n index.ndx -o gyrate.xvg <<< "1"

gmx rmsf -s md_out.tpr -f md_out_noPBC.xtc -n index.ndx -o rmsf.xvg -oq rmsf.pdb -res <<< "1"


>&2 echo 'Script running:***************************** FINISH *********************************'
cp ~/$PBS_JOBNAME.{e,o}${PBS_JOBID%.*} .
